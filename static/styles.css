:root {
   --cell-count: 9;
   --cell-padding: 0.25rem;
   --boardcell-size: 5rem;

   @media screen and (max-width: 768px) {
      --boardcell-size: calc((100vmin - var(--cell-padding) * 8 - 2rem) / var(--cell-count));
   }
}

body {
   display: grid;
   place-items: center;
   background-color: #0d0d0d;
   margin: 1rem;
}

.board,
#playedtiles {
   display: grid;
   grid-template-columns: repeat(var(--cell-count), var(--boardcell-size));
   grid-template-rows: repeat(var(--cell-count), var(--boardcell-size));
   gap: var(--cell-padding);
}

#playedtiles {
   top: 1rem;
   position: absolute;
}

.rack {
   background-color: hsl(34, 33%, 53%);
   padding: 0.5rem;
   display: flex;
   justify-content: space-evenly;
   border-radius: 0.25rem;
}

.boardcell,
.tile {
   border-radius: 0.25rem;
   width: var(--boardcell-size);
   height: var(--boardcell-size);
   position: relative;

   &::before {
      font-weight: 900;
      pointer-events: none;
      font-family: monospace;
      position: absolute;
      top: 50%;
      left: 50%;
      font-size: 1rem;
      translate: -50% -50%;
   }
}

.tile {
   top: 0px;
   left: 0px;
   cursor: grab;
   transition: background-color 600ms;
   &::before {
      content: attr(data-letter);
      font-size: 1.5rem;
   }

   &::after {
      content: attr(data-score);
      pointer-events: none;
      position: absolute;
      top: 0;
      right: 0.25em;
      font-family: monospace;
      font-size: 1.25rem;
   }
   background: hsl(41, 100%, 45%);

   &.dragging {
      position: absolute;
      animation: dragging 2s infinite ease-in-out;
      cursor: grabbing;
   }

   &.played {
      animation: shrink 100ms forwards ease-out;
   }

   &.permanant {
      animation: lock 200ms forwards ease-in-out;
      cursor: not-allowed;
      transform-origin: center center;
      background-color: hsl(41, 100%, 75%);
   }

   &.invalid {
      animation: invalid-tile 1s forwards linear;
   }

   &.foreign {
      cursor: not-allowed;
      outline-offset: -10px;
      outline: 10px solid black;
   }
}

@keyframes invalid {
   0%,
   50%,
   100% {
      rotate: 0deg;
   }

   25% {
      rotate: -15deg;
   }

   75% {
      rotate: 15deg;
   }
}

@keyframes lock {
   from {
      scale: 0.9;
   }
   50% {
      scale: 1.5;
   }
   to {
      scale: 1;
   }
}

@keyframes invalid-tile {
   from {
      background: red;
   }
   to {
      background: hsl(56, 100%, 39%);
   }
}

@keyframes dragging {
   0%,
   100% {
      rotate: -10deg;
   }
   50% {
      rotate: 10deg;
   }
}

@keyframes shrink {
   from {
      scale: 1;
   }
   to {
      scale: 0.9;
   }
}

.boardcell {
   background: hsl(34, 94%, 82%);
   &.tw {
      background-color: rgb(91, 91, 255);

      &::before {
         content: "3W";
      }
   }

   &.dw {
      background-color: rgb(151, 151, 255);
      &::before {
         content: "2W";
      }
   }

   &.tl {
      background-color: rgb(255, 91, 91);
      &::before {
         content: "3L";
      }
   }

   &.dl {
      background-color: rgb(255, 155, 155);
      &::before {
         content: "2L";
      }
   }

   &.start {
      background-color: hsl(0, 0%, 33%);
   }
}

.hud {
   display: grid;
   grid-template-columns: 3rem auto 6rem;
   height: 6rem;
   width: calc((var(--boardcell-size) * 9) + (0.25rem * 8));
   margin-top: 0.5rem;
   gap: 0.25rem;
}

.actions {
   display: grid;
   grid-template: 3rem 3rem / 3rem 3rem;
   gap: 0.125rem;
}

.action {
   padding: 0.25rem;
   border-radius: 0.25rem;
   height: 100%;
   width: 100%;
   border: 0;
   background-color: hsl(33, 92%, 85%);

   svg {
      fill: hsl(33, 33%, 37%);
      stroke: hsl(33, 33%, 37%);
      width: 100%;
      height: 100%;
   }

   transition: all 100ms;
   cursor: pointer;

   &:hover {
      background-color: hsl(32, 21%, 56%);

      svg {
         fill: hsl(35, 33%, 19%);
         stroke: hsl(35, 33%, 19%);
      }
   }

   &:active {
      scale: 0.9;
   }
}

.rackutils {
   display: grid;
   grid-template-rows: 3rem 3rem;
   grid-template-columns: 3rem;
   gap: 0.125rem;
}

.submit {
   grid-column: 1/3;
}

.shrinking {
   animation: shuffle 250ms forwards;
}

.growing {
   animation: shuffle 250ms reverse;
}

.sorting1 {
   animation: sort 250ms forwards ease-in;
}

.sorting2 {
   animation: sort 250ms reverse ease-out;
}

@keyframes shuffle {
   from {
      rotate: 0deg;
      scale: 1;
   }
   to {
      rotate: 180deg;
      scale: 0;
   }
}

@keyframes sort {
   from {
      scale: 100% 100%;
   }
   to {
      scale: 0% 100%;
   }
}
